<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>chk</Title>
      <Shortcut>chk</Shortcut>
      <Description>Creates an extended event session, runs the code you want to test, extracts the output and then stops the session</Description>
      <Author />
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations />
      <Code Language="sql"><![CDATA[/**
Based on code by Phil Factor from https://www.red-gate.com/hub/product-learning/sql-prompt/testing-performance-individual-sql-statements-within-batch-using-sql-prompt
**/
IF EXISTS --if the session already exists, then delete it. We are assuming you've changed something
  (
  SELECT * FROM sys.server_event_sessions
    WHERE server_event_sessions.name = 'CheckingSQLStatements'
  )
  DROP EVENT SESSION CheckingSQLStatements ON SERVER;
GO
CREATE EVENT SESSION CheckingSQLStatements --call it what you wish, of course
ON SERVER
  ADD EVENT sqlserver.sql_statement_completed --we just have one event
    (ACTION (sqlserver.database_name, sqlserver.sql_text, sqlserver.plan_handle)-- and these global vars
     WHERE (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, N'--Test these queries%'))
	 --we just want the batch and nothing else so we put an identifying string at the start
    )
  ADD TARGET package0.ring_buffer 
  --we don't need a more permanent record or a bucket count
WITH (STARTUP_STATE = OFF);
GO
ALTER EVENT SESSION CheckingSQLStatements ON SERVER STATE = START;
--V-----The Batch being tested starts here ------V
GO --don't change this next line without changing the WHERE clause above
--Test these queries
-------------------------------------------------------------------

$SELECTEDTEXT$

------------------------------------------------------------------
go
DECLARE @Target_Data XML =
          (
          SELECT TOP 1 Cast(xet.target_data AS XML) AS targetdata
            FROM sys.dm_xe_session_targets AS xet
              INNER JOIN sys.dm_xe_sessions AS xes
                ON xes.address = xet.event_session_address
            WHERE xes.name = 'CheckingSQLStatements'
              AND xet.target_name = 'ring_buffer'
          );
SELECT 
CONVERT(datetime2,
        SwitchOffset(CONVERT(datetimeoffset,the.event_data.value('(@timestamp)[1]', 'datetime2')),
		DateName(TzOffset, SYSDATETIMEOFFSET()))) AS datetime_local,
CONVERT(DECIMAL(6,3),round(the.event_data.value('(data[@name="duration"]/value)[1]', 'bigint')/1000000.0,3,1))  AS duration,
the.event_data.value('(data[@name="statement"]/value)[1]', 'nvarchar(max)') AS [statement],
--the.event_data.value('(action[@name="sql_text"]/value)[1]', 'nvarchar(max)') AS sql_text,
--the.event_data.value('(action[@name="database_name"]/value)[1]', 'nvarchar(80)') AS [database_name],
qp.query_plan,
the.event_data.value('(data[@name="cpu_time"]/value)[1]', 'bigint') AS [cpu_time(microsSecs)],
the.event_data.value('(data[@name="physical_reads"]/value)[1]', 'bigint') AS physical_reads,
the.event_data.value('(data[@name="logical_reads"]/value)[1]', 'bigint') AS logical_reads,
the.event_data.value('(data[@name="writes"]/value)[1]', 'bigint') AS writes,
the.event_data.value('(data[@name="row_count"]/value)[1]', 'bigint') AS row_count
--the.event_data.value('(data[@name="last_row_count"]/value)[1]', 'int') AS last_row_count,
--the.event_data.value('(data[@name="line_number"]/value)[1]', 'int') AS line_number,
--the.event_data.value('(data[@name="offset"]/value)[1]', 'int') AS offset,
--the.event_data.value('(data[@name="offset_end"]/value)[1]', 'int') AS offset_end,

FROM @Target_Data.nodes('//RingBufferTarget/event') AS the (event_data)
  CROSS APPLY sys.dm_exec_query_plan(
   Convert(varbinary(64),--convert to valid plan handle
          '0x' + the.event_data.value('(action[@name="plan_handle"]/value)[1]', 'nvarchar(max)')
		  ,1)) as qp

ALTER EVENT SESSION CheckingSQLStatements ON SERVER STATE = STOP;]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>